#!/usr/bin/env python

import torch
from utils.debugger import Debugger
from utils.eval import getPreds
import cv2
import numpy as np

import rospy
#import roslib
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

##class for image subscription
class pose_extractor:
    def __init__(self):
      rospy.loginfo("Initializing 3D Pose Extractor ...")
      self.image_topic = rospy.get_param('~image_topic', '/cv_camera/image_raw')
      self.model_name = rospy.get_param('~pose_model', './models/hgreg-3d.pth')
      rospy.loginfo("Loading model ...")
      self.model = torch.load(self.model_name).cuda()
      self.bridge = CvBridge()
      rospy.loginfo("Model loaded, waiting for coming image message ...")
      self.image_sub = rospy.Subscriber(self.image_topic, Image, self.callback)
      # TODO: pub 3d pose
      #self.3d_pose_pub = rospy.Publisher('/3d_pose_ros/3d_pose', ...)
    
    def callback(self, data):
      # convert ros_image to cv_image
      try:
        cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
      except CvBridgeError as e:
        print(e)  
      
      # feed input image to model
      input = torch.from_numpy(cv_image.transpose(2, 0, 1)).float() / 256.
      input = input.view(1, input.size(0), input.size(1), input.size(2))
      input_var = torch.autograd.Variable(input).float().cuda()
      output =  self.model(input_var)
      
      print("2D pose: ")
      pose2D = getPreds((output[-2].data).cpu().numpy())[0] * 4
      print(pose2D)
      print(" ")
      
      print("3D pose:")
      reg = (output[-1].data).cpu().numpy().reshape(pose2D.shape[0], 1)
      pose3D = np.concatenate([pose2D, (reg + 1) / 2. * 256], axis = 1)
      print(pose3D)
      print("-------------------------------------------")
      print(" ")
      
      # TODO: pub some msg
      
      # debug and visualization
      debugger = Debugger()
      debugger.addImg((input[0].numpy().transpose(1, 2, 0)*256).astype(np.uint8))
      debugger.addPoint2D(pose2D, (255, 0, 0))
      debugger.addPoint3D(pose3D)
      #debugger.showImg()
      debugger.show3D()
      

# issue: latency of the first frame handling lies up to 1,5s !!!
def main():
  rospy.init_node('pose_3d_ros')
  poseExtractor = pose_extractor()
  
  try:
    rospy.spin()
  except KeyboardInterrupt:
    print("Shutting down 3d pose ros node")
  

if __name__ == '__main__':
  main()
  
  
  
  
  
  
  
  
  
  
  
